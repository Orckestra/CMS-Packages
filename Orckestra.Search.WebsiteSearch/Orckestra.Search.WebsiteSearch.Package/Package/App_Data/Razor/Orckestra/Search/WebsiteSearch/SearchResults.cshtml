@using Composite.C1Console.Security
@using Orckestra.Search.WebsiteSearch

@inherits RazorFunction
@functions {
    public override string FunctionDescription => "${Orckestra.Search.WebsiteSearch,Component.SearchResults.Destription}";

    public static WidgetFunctionProvider SearchableDataTypeSelector()
    {
        return GetMultiSelectorWidget(() => WebsiteSearchFacade.GetSearchableDataTypeOptions());
    }

    public static WidgetFunctionProvider FacetSelector()
    {
        return GetMultiSelectorWidget(() => WebsiteSearchFacade.GetFacetOptions());
    }

    private static WidgetFunctionProvider GetMultiSelectorWidget(Expression<Func<object>> optionsGetter)
    {
        var method = ((MethodCallExpression)optionsGetter.Body).Method;

        return StandardWidgetFunctions.DropDownList(method.DeclaringType, method.Name, "Item1", "Item2", true, false);
    }

    [FunctionParameter(Label = "${Orckestra.Search.WebsiteSearch,SearchResults.ShowSearchForm.Label}",
        Help = "${Orckestra.Search.WebsiteSearch,SearchResults.ShowSearchForm.Help}",
        DefaultValue = true)]
    public bool ShowSearchForm { get; set; }

    [FunctionParameter(Label = "${Orckestra.Search.WebsiteSearch,SearchResults.SearchButtonLabel.Label}",
        Help = "${Orckestra.Search.WebsiteSearch,SearchResults.SearchButtonLabel.Help}",
        DefaultValue = "")]
    public string SearchButtonLabel { get; set; }

    [FunctionParameter(Label = "${Orckestra.Search.WebsiteSearch,SearchResults.SearchFieldTeaserText.Label}",
        Help = "${Orckestra.Search.WebsiteSearch,SearchResults.SearchFieldTeaserText.Help}",
        DefaultValue = "Search")]
    public string SearchFieldTeaserText { get; set; }

    [FunctionParameter(Label = "${Orckestra.Search.WebsiteSearch,SearchResults.PageSize.Label}",
        Help = "${Orckestra.Search.WebsiteSearch,SearchResults.PageSize.Help}", DefaultValue = 10)]
    public int PageSize { get; set; }

    [FunctionParameter(Label = "${Orckestra.Search.WebsiteSearch,SearchResults.CurrentSite.Label}",
        Help = "${Orckestra.Search.WebsiteSearch,SearchResults.CurrentSite.Help}", DefaultValue = true)]
    public bool CurrentSite { get; set; }

    [FunctionParameter(Label = "${Orckestra.Search.WebsiteSearch,SearchResults.ShowHighlights.Label}",
        Help = "${Orckestra.Search.WebsiteSearch,SearchResults.ShowHighlights.Help}",
        DefaultValue = false)]
    public bool ShowHighlights { get; set; }

    [FunctionParameter(Label = "${Orckestra.Search.WebsiteSearch,SearchResults.DataTypes.Label}",
        Help = "${Orckestra.Search.WebsiteSearch,SearchResults.DataTypes.Help}",
        DefaultValue = null,
        WidgetFactoryMethod = "SearchableDataTypeSelector")]
    public IEnumerable<string> DataTypes { get; set; }

    [FunctionParameter(Label = "${Orckestra.Search.WebsiteSearch,SearchResults.FacetFields.Label}",
        Help = "${Orckestra.Search.WebsiteSearch,SearchResults.FacetFields.Help}",
        DefaultValue = null,
        WidgetFactoryMethod = "FacetSelector")]
    public IEnumerable<string> FacetFields { get; set; }

    string GetFacetFieldCheckboxPrefix(string fieldName)
    {
        return "f_" + fieldName + "_";
    }

    string GetSearchResultPageUrl(int pageNumber)
    {
        var parts = new List<string> { "?p=" + pageNumber };

        var qs = Request.QueryString;
        parts.AddRange(qs.AllKeys.Where(key => key != "p")
                         .Select(key => Server.UrlEncode(key) + "=" + Server.UrlEncode(qs[key])));

        return string.Join("&", parts);
    }

    WebsiteSearchResult _searchResult;


    private int PageNumber => int.TryParse(Request["p"], out var page) && page >= 1 ? page : 1;

    protected int TotalPages => (int)Math.Ceiling((decimal)_searchResult.ResultsFound / PageSize);

    private string[] GetFacetSelection(string fieldName)
    {
        var prefix = GetFacetFieldCheckboxPrefix(fieldName);
        return Request.QueryString.AllKeys
            .Where(key => key.StartsWith(prefix))
            .Select(key => key.Substring(prefix.Length))
            .ToArray();
    }

    private bool _showExplanation;
}

@{

    var searchQuery = Request.QueryString["q"] ?? string.Empty;
    bool showFacets = false;

    if (!string.IsNullOrWhiteSpace(searchQuery) && searchQuery.Length > 1)
    {
        // Tokenize
        searchQuery = searchQuery.Trim().ToLower();
        string[] keywords = searchQuery.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

        var knowTypes = DataFacade.GetAllInterfaces().ToDictionary(t => t.FullName);
        _showExplanation = UserValidationFacade.IsLoggedIn() && Request.QueryString["showExplanation"] == "true";

        Type[] dataTypes = DataTypes?.Select(name => knowTypes[name]).ToArray();

        var facetsToQuery = FacetFields ?? Array.Empty<string>();

        var facets = facetsToQuery.Select(fieldName => new WebsiteSearchQueryFacet
        {
            Name = fieldName,
            Selections = GetFacetSelection(fieldName)
        });

        _searchResult = WebsiteSearchFacade.Search(new WebsiteSearchQuery
        {
            Culture = Data.CurrentLocale,
            Keywords = keywords,
            DataTypes = dataTypes,
            CurrentSiteOnly = CurrentSite,
            PageNumber = PageNumber - 1,
            Facets = facets.ToArray(),
            PageSize = PageSize,
            ShowExplanation = _showExplanation
        });

        showFacets = _searchResult.Facets.Any(f => f.Hits.Any());
    }
    else
    {
        _searchResult = new WebsiteSearchResult();
    }
}

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:f="http://www.composite.net/ns/function/1.0">
<head>
    @if (ShowSearchForm && showFacets)
    {
        <script type="text/javascript">
            function SubmitContentSearchForm() {
                document.getElementById('SearchForm').submit();
            }
        </script>
    }
</head>
<body>
    <div class="websitesearch clearfix">
        @if (ShowSearchForm)
        {
            if (showFacets)
            {
                <form id="SearchForm" action="@CurrentPageNode.Url" class="search-form form-inline" method="get" role="search">
                    <div class="row">
                        <div class="col-md-8">

                            @SearchForm(searchQuery)
                            @ShowFoundDocuments(searchQuery)

                        </div>
                        <div class="col-md-4">
                            @ShowFacets(_searchResult)

                        </div>
                    </div>
                </form>}
            else
            {
                <div class="clearfix">
                    @Function("Orckestra.Search.WebsiteSearch.SearchForm",
                    new
                    {
                        SearchResultPage = new DataReference<IPage>(CurrentPageNode.Id),
                        SearchButtonLabel = SearchButtonLabel,
                        SearchFieldTeaserText = SearchFieldTeaserText
                    })
                </div>

                if (!string.IsNullOrWhiteSpace(searchQuery))
                {
                    <hr />
                }

                @ShowFoundDocuments(searchQuery)
            }
        }
        else
        {
            @ShowFoundDocuments(searchQuery)
        }

    </div>
</body>
</html>


@helper ShowFoundDocuments(string searchQuery)
{
    if (string.IsNullOrWhiteSpace(searchQuery))
    {
        return;
    }

    <p style="margin-top: 20px;">
        @Html.Raw(string.Format(Resources.WebsiteSearch.SearchResults_TotalCount, _searchResult.ResultsFound, Server.HtmlEncode(searchQuery)))
    </p>

    <ol class="websitesearch-results" start="@(PageSize*(PageNumber-1)+1)">
        @foreach (var entry in _searchResult.Entries)
        {
            <li>
                <a href="@entry.Url">
                    @Html.Raw(entry.Title)
                </a>
                @if (ShowHighlights && !string.IsNullOrEmpty(entry.Highlight))
                {
                    <br />
                    @Html.Raw(HttpUtility.HtmlEncode(entry.Highlight))
                }
                @if (_showExplanation)
                {
                    <table class="table">
                        <tr>
                            <th>Boost</th>
                            <td>@entry.Boost</td>
                        </tr>
                        <tr>
                            <th>Score</th>
                            <td>@entry.Score</td>
                        </tr>
                        <tr>
                            <th>ExplanationSummary</th>
                            <td>@entry.ExplanationSummary</td>
                        </tr>
                    </table>
                }
            </li>
        }
    </ol>
    if (TotalPages > 1)
    {
        <ul class="pagination">
            @for (int i = 1; i <= TotalPages; i++)
            {
                if (i == PageNumber)
                {
                    <li class="active"><span>@i</span></li>
                }
                else
                {
                    <li><a href="@GetSearchResultPageUrl(i)">@i</a></li>
                }
            }
        </ul>
    }
}

@helper SearchForm(string searchQuery)
{
    <div class="clearfix">
        <div class="form-group">
            <input type="text" class="form-control" placeholder="@SearchFieldTeaserText" id="searchText" name="q" value="@searchQuery" />
        </div>

        @if (UserValidationFacade.IsLoggedIn())
        {
            <div class="form-group">
                <label title="Show score and score explanation summary below each search result item">Show score <input type="checkbox" name="showExplanation" value="true" checked="@(_showExplanation ? "checked" : null)" /></label>
            </div>
        }

        <button type="submit" class="btn btn-default">
            @if (string.IsNullOrEmpty(@SearchButtonLabel))
            {
                <span class="glyphicon glyphicon-search"></span>
            }
            else
            {
                @SearchButtonLabel
            }
        </button>
    </div>
}

@helper ShowFacets(WebsiteSearchResult result)
{
    var labels = WebsiteSearchFacade.GetFacetOptions().ToDictionary(t => t.Item1, t => t.Item2);
    var index = 0;
    <div class="facets">
        @foreach (var facet in result.Facets)
        {
            index++;
            if (facet.Hits.Count == 0)
            {
                continue;
            }
            <div class="panel panel-default">
                <div class="panel-heading"><a href="#facet@(index)" data-toggle="collapse">@labels[facet.Name]</a></div>
                <div id="facet@(index)" class="panel-collapse collapse in">
                    <div class="list-group">
                        @foreach (var hit in facet.Hits)
                        {
                            string key = GetFacetFieldCheckboxPrefix(facet.Name) + hit.Value;
                            bool isChecked = Request.QueryString.AllKeys.Contains(key);

                            <div class="list-group-item">
                                <div class="checkbox">
                                    <label for="@key">
                                        <input type="checkbox" name="@key" value="1" id="@key"
                                               onchange="SubmitContentSearchForm()"
                                               @if (isChecked) { <text> checked="checked" </text> } />
                                        @hit.Label
                                    </label>
                                </div>
                                <span class="badge">@hit.HitCount</span>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}
